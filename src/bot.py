import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto, BotCommand, MenuButtonCommands
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
import os
from pathlib import Path
import asyncio

# Enable logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# Replace with your bot token
TOKEN = "7754735588:AAFkiW8ykrfvE3cMK-3uLuoC56dhKeRrC_g"

# Data structures for game content
BESTIARY = {
    "creature1": {
        "name": "–¢–æ–¥–¥",
        "description": "–û–Ω –Ω–µ –∏–¥—ë—Ç, –∞ –ø—Ä–æ–¥–∞–≤–ª–∏–≤–∞–µ—Ç –ª–µ—Å —Å–≤–æ–µ–π —Ç—è–∂—ë–ª–æ–π –ø–æ—Å—Ç—É–ø—å—é, –∞ –µ–≥–æ –ª–µ–¥—è–Ω–æ–π –≤–∑–≥–ª—è–¥ –≤—ã—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –∂–µ—Ä—Ç–≤ –¥–∞–∂–µ –≤ –∫—Ä–æ–º–µ—à–Ω–æ–π —Ç—å–º–µ, –±—É–¥—Ç–æ –æ–Ω —Å–∞–º ‚Äî –ª–∏—à—å –µ—â—ë –æ–¥–∏–Ω —Ö–∏—â–Ω–∏–∫ –≤ —ç—Ç–æ–º –≥–Ω–∏—é—â–µ–º –º–∏—Ä–µ.",
        "image_path1": "images/bestiary/hunter1.jpg",
        "image_path2": "images/bestiary/hunter2.jpg"
    },
    "creature2": {
        "name": "–í–æ–ª–∫–∏ –•–∞–≥–∞–∞–Ω",
        "description": "–ò—Ö —É–∫—É—Å –≥–Ω–∏—ë—Ç, –∫–∞–∫ —Å–∞–º –ª–µ—Å, –∞ –∏—Ö —à–µ—Ä—Å—Ç—å ‚Äî —Å–ø–ª–æ—à–Ω–∞—è –∫–æ—Ä–∫–∞ –∏–∑ –∫—Ä–æ–≤–∏ –∏ –≥—Ä—è–∑–∏.",
        "image_path1": "images/bestiary/wolf.png",
        "image_path2": "images/bestiary/wolf(colored).jpg"
    },
    "creature3": {
        "name": "–í–∞–Ω–∞‚Äô–∫–≤–µ—à–∏",
        "description": "–û–Ω–∏ –Ω–µ –±–µ–≥—É—Ç, –∞ —Å–∫–æ–ª—å–∑—è—Ç –Ω–∞ —Å–≤–æ–∏—Ö –∫–æ—Å—Ç—è–Ω—ã—Ö –Ω–æ–≥–∞—Ö. –ò—Ö —Ä–∞–∑–¥–≤–æ–µ–Ω–Ω—ã–µ —á–µ–ª—é—Å—Ç–∏ —à–µ–ø—á—É—Ç —á—Ç–æ-—Ç–æ –Ω–∞ –∑–∞–±—ã—Ç–æ–º —è–∑—ã–∫–µ.",
        "image_path1": "images/bestiary/deer.jpg"
    },
    "creature4": {
        "name": "–í–µ–Ω–¥–∏–≥–æ",
        "description": "–û–Ω –Ω–µ –æ—Ö–æ—Ç–∏—Ç—Å—è, –∞ –º–µ–¥–ª–µ–Ω–Ω–æ —Å—Ö–æ–¥–∏—Ç —Å —É–º–∞ ‚Äî –µ–≥–æ –æ–ª–µ–Ω–∏–π —á–µ—Ä–µ–ø —Å–∫—Ä–∏–ø–∏—Ç —Å –∫–∞–∂–¥—ã–º —à–∞–≥–æ–º, –∞ –∫–æ—Å—Ç—è–Ω—ã–µ –ø–∞–ª—å—Ü—ã, –∏–∑–æ–¥—Ä–∞–Ω–Ω—ã–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∑—É–±–∞–º–∏, —Ç—è–Ω—É—Ç—Å—è –∫ —Ç–µ–ø–ª—É –∂–∏–≤–æ–π –ø–ª–æ—Ç–∏, –∫–æ—Ç–æ—Ä—É—é –∫–æ–≥–¥–∞-—Ç–æ –Ω–∞–∑—ã–≤–∞–ª —Å–µ–±–µ –ø–æ–¥–æ–±–Ω–æ–π.",
        "image_path1": "images/bestiary/Vendigo1.jpg",
        "image_path2": "images/bestiary/Vendigo2.jpg"
    },
    # Add more creatures here
}

LOCATIONS = {
    "location1": {
        "name": "–ì–Ω–∏–ª–æ–π –ª–µ—Å (–í—Ä—ç–∫–≤—É–¥)",
        "description": "–ó–¥–µ—Å—å –∑–µ–º–ª—è –¥—ã—à–∏—Ç —á–µ—Ä–µ–∑ —Ä–∞–∑–≤–µ—Ä—Å—Ç—ã–µ –∫–æ—Ä–Ω–∏, –∞ –º–µ–∂–¥—É —Å—Ç–≤–æ–ª–∞–º–∏ –º–µ–ª—å–∫–∞—é—Ç —Ç–µ–Ω–∏ —Ç–µ—Ö, –∫—Ç–æ –æ—Å–º–µ–ª–∏–ª—Å—è –≤–æ–π—Ç–∏.",
        "image_path1": "images/locations/forest2.jpg",
        "image_path2": "images/locations/forest1.jpg"
    },
    # Add more locations here
}

STORY_NOTES = {
    "note1": {
        "name": "–†—ç–π–≤–µ–Ω–∫—Ä–µ—Å—Ç –∏ –æ–∫—Ä–µ—Å—Ç–Ω–æ—Å—Ç–∏",
        "description": "–ì–æ—Ä–æ–¥ –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º –†—ç–π–≤–µ–Ω–∫—Ä–µ—Å—Ç —Å—Ç–æ–∏—Ç —Å–æ–≤—Å–µ–º —Ä—è–¥–æ–º —Å –ª–µ—Å–æ–º –í—Ä–µ–∫–≤—É–¥. –õ–µ—Å –∏–∑–≤–µ—Å—Ç–µ–Ω —Å–≤–æ–µ–π –¥—Ä–µ–º—É—á–µ—Å—Ç—å—é, –ø–æ—Ç–æ–º—É —Ç–æ –µ–≥–æ —Ç–∞–∫ –∏ –Ω–∞–∑–≤–∞–ª–∏. –ù–æ –∑–∞ —ç—Ç–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –º–æ–∂–µ—Ç —Å—Ç–æ—è—Ç—å –∏ –Ω–µ—á—Ç–æ –±–æ–ª—å—à–µ–µ..." + "\n" + "–í –≥–æ—Ä–æ–¥–∏—à–∫–µ —É–∂ –æ—á–µ–Ω—å –ø–æ–ø—É–ª—è—Ä–Ω–∞ –æ—Ö–æ—Ç–∞ –≤—Å–≤—è–∑–∏ —Å –Ω–∞–ª–∏—á–∏–µ–º —Ç–∞–∫–∏—Ö –æ–±—à–∏–Ω—ã—Ö –¥–µ–±—Ä–µ–π –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏. –ê —Å–∞–º–∏ –æ—Ö–æ—Ç–Ω–∏–∫–∏ —á–∞—Å—Ç–æ –æ—Ç–¥—ã—Ö–∞—é—Ç –≤ –º–µ—Å—Ç–Ω—ã—Ö —Ç–∞–≤–µ—Ä–Ω–∞—Ö.",
        "image_path1": "images/notes/note1.png"
    },
    "note2": {
        "name": "–°–ª—É—Ö–∏",
        "description": "–°—Ç—Ä–∞—à–Ω—ã–µ —Å–ª—É—Ö–∏ –ø–æ–ª–∑—É—Ç –ø–æ –≥–æ—Ä–æ–¥—É. –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –æ—Ö–æ—Ç–Ω–∏–∫–æ–≤, –æ—Ç —Å—Ç–∞—Ä–∏–∫–æ–≤ –¥–æ –º–æ–ª–æ–¥–Ω—è–∫–∞, —Å–æ–æ–±—â–∞—é—Ç –æ –Ω–µ–∫–æ–µ–º —Å—Ç—Ä–∞—à–Ω–æ–º –±–æ–ª—å—à–æ–º –∑–≤–µ—Ä–µ, —á—Ç–æ –ø–æ—Ö–æ–∂ –Ω–∞ –æ–ª–µ–Ω—è, –Ω–æ –∏–º –Ω–µ —è–≤–ª—è–µ—Ç—Å—è. –ì–æ–ª–æ–≤–∞ –∏ —Ä–æ–≥–∞ –±–µ–ª—ã, –∞ —Ö–æ–¥–∏—Ç –æ–Ω –Ω–∞ –∑–∞–¥–Ω–∏—Ö –ª–∞–ø–∞—Ö. –ò–∑ –≥–ª–æ—Ç–∫–∏ –µ–≥–æ –∏—Å—Ö–æ–¥–∏—Ç —É–∂–∞—Å–∞—é—â–∏–π –Ω–µ–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–µ–≤. –ù–æ –∫–∞–∫ –º–∏–Ω–∏–º—É –æ–¥–∏–Ω –æ—Ö–æ—Ç–Ω–∏–∫ —Å—á–∏—Ç–∞–µ—Ç —ç—Ç–æ —á—É–¥–∏—â–µ –ª–∏—à—å –±–µ—à–µ–Ω–Ω—ã–º –∫—Ä—É–ø–Ω—ã–º –æ–ª–µ–Ω–µ–º.",
        "image_path1": "images/notes/note2.png"
    },
    "note3": {
        "name": "–ë–µ—à–µ–Ω–Ω—ã–π –æ–ª–µ–Ω—å",
        "description": "–í—ã—Å–æ–∫–∏–π —Ö—É–¥–æ–π —Å–∏–ª—É—ç—Ç –º–µ–¥–ª–µ–Ω–Ω–æ –¥–≤–∏–∂–µ—Ç—Å—è –º–µ–∂ –¥–µ—Ä–µ–≤—å–µ–≤. –û–Ω —Å–ª–µ–≥–∫–∞ –ø—Ä–∏–≥–Ω—É–ª—Å—è –∫ –∑–µ–º–ª–µ, –Ω–æ —Ä–æ–≥–∞ –≤—Å–µ —Ä–∞–≤–Ω–æ —Ü–µ–ø–ª—è—é—Ç—Å—è –∑–∞ –≤–µ—Ç–∫–∏ –∏ –ª–æ–º–∞—é—Ç –∏—Ö. –û—á–∏-–æ–≥–æ–Ω—å–∫–∏ –±–ª—É–∂–¥–∞—é—Ç –ø–æ –æ–∫—Ä—É–∂–∞—é—â–µ–º—É –µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤—É, –ø–æ–∫–∞ –≤–¥—Ä—É–≥ –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å –Ω–∞ –æ—Ö–æ—Ç–Ω–∏–∫–µ...",
        "image_path1": "images/notes/note3.png"
    },
    # Add more notes here
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Send a message when the command /start is issued."""
    # Initialize message tracking in user_data
    context.user_data['last_media_messages'] = []
    context.user_data['last_keyboard_message'] = None
    
    # Setup commands and menu button if not already set
    try:
        commands = [
            BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –æ—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        ]
        await context.bot.set_my_commands(commands)
        await context.bot.set_chat_menu_button(menu_button=MenuButtonCommands())
    except Exception as e:
        logging.error(f"Error setting up commands: {e}")
    
    keyboard = [
        [InlineKeyboardButton("üêæ –ë–µ—Å—Ç–∏–∞—Ä–∏–π", callback_data='bestiary')],
        [InlineKeyboardButton("üó∫ –õ–æ–∫–∞—Ü–∏–∏", callback_data='locations')],
        [InlineKeyboardButton("üìù –°—é–∂–µ—Ç–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏", callback_data='notes')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä–æ–≤—É—é —ç–Ω—Ü–∏–∫–ª–æ–ø–µ–¥–∏—é! –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:',
        reply_markup=reply_markup
    )

async def delete_previous_messages(context: ContextTypes.DEFAULT_TYPE, chat_id: int):
    """Delete previous media and keyboard messages."""
    # Delete media messages
    if 'last_media_messages' in context.user_data:
        for msg_id in context.user_data['last_media_messages']:
            try:
                await context.bot.delete_message(chat_id=chat_id, message_id=msg_id)
            except Exception as e:
                logging.error(f"Error deleting media message {msg_id}: {e}")
        context.user_data['last_media_messages'] = []
    
    # Delete keyboard message
    if 'last_keyboard_message' in context.user_data and context.user_data['last_keyboard_message']:
        try:
            await context.bot.delete_message(chat_id=chat_id, message_id=context.user_data['last_keyboard_message'])
        except Exception as e:
            logging.error(f"Error deleting keyboard message: {e}")
        context.user_data['last_keyboard_message'] = None

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle button presses."""
    query = update.callback_query
    await query.answer()

    if query.data == 'bestiary':
        # Delete previous messages
        await delete_previous_messages(context, query.message.chat_id)
        
        keyboard = [[InlineKeyboardButton(item["name"], callback_data=f'beast_{key}')] 
                   for key, item in BESTIARY.items()]
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='main_menu')])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤–æ –∏–∑ –±–µ—Å—Ç–∏–∞—Ä–∏—è:",
            reply_markup=reply_markup
        )
    
    elif query.data == 'locations':
        # Delete previous messages
        await delete_previous_messages(context, query.message.chat_id)
        
        keyboard = [[InlineKeyboardButton(item["name"], callback_data=f'loc_{key}')] 
                   for key, item in LOCATIONS.items()]
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='main_menu')])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é:",
            reply_markup=reply_markup
        )
    
    elif query.data == 'notes':
        # Delete previous messages
        await delete_previous_messages(context, query.message.chat_id)
        
        keyboard = [[InlineKeyboardButton(item["name"], callback_data=f'note_{key}')] 
                   for key, item in STORY_NOTES.items()]
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='main_menu')])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ —Å—é–∂–µ—Ç–Ω—É—é –∑–∞–º–µ—Ç–∫—É:",
            reply_markup=reply_markup
        )
    
    elif query.data == 'main_menu':
        # Delete previous messages
        await delete_previous_messages(context, query.message.chat_id)
        
        keyboard = [
            [InlineKeyboardButton("üêæ –ë–µ—Å—Ç–∏–∞—Ä–∏–π", callback_data='bestiary')],
            [InlineKeyboardButton("üó∫ –õ–æ–∫–∞—Ü–∏–∏", callback_data='locations')],
            [InlineKeyboardButton("üìù –°—é–∂–µ—Ç–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏", callback_data='notes')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            text='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä–æ–≤—É—é —ç–Ω—Ü–∏–∫–ª–æ–ø–µ–¥–∏—é! –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:',
            reply_markup=reply_markup
        )
    
    elif query.data.startswith('beast_'):
        item_key = query.data.replace('beast_', '')
        item = BESTIARY[item_key]
        keyboard = [[InlineKeyboardButton("üîô –ö –±–µ—Å—Ç–∏–∞—Ä–∏—é", callback_data='bestiary')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º
            if not os.path.exists(item['image_path1']):
                logging.error(f"File not found: {item['image_path1']}")
                raise FileNotFoundError(f"Image file not found: {item['image_path1']}")

            media_group = []
            caption = f"{item['name']}\n\n{item['description']}"
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            try:
                media_group.append(
                    InputMediaPhoto(
                        media=open(item['image_path1'], 'rb'),
                        caption=caption
                    )
                )
            except Exception as e:
                logging.error(f"Error opening first image {item['image_path1']}: {str(e)}")
                raise
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
            if 'image_path2' in item:
                if not os.path.exists(item['image_path2']):
                    logging.error(f"Second image file not found: {item['image_path2']}")
                else:
                    try:
                        media_group.append(
                            InputMediaPhoto(
                                media=open(item['image_path2'], 'rb')
                            )
                        )
                    except Exception as e:
                        logging.error(f"Error opening second image {item['image_path2']}: {str(e)}")
            
            if not media_group:
                raise Exception("No valid images to send")
            
            # Delete previous messages before sending new ones
            await delete_previous_messages(context, query.message.chat_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            sent_media = await context.bot.send_media_group(
                chat_id=query.message.chat_id,
                media=media_group
            )
            
            # Store message IDs for later deletion
            context.user_data['last_media_messages'] = [msg.message_id for msg in sent_media]
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Ç–¥–µ–ª—å–Ω–æ
            keyboard_message = await context.bot.send_message(
                chat_id=query.message.chat_id,
                text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup
            )
            
            # Store keyboard message ID
            context.user_data['last_keyboard_message'] = keyboard_message.message_id
            
        except FileNotFoundError as e:
            logging.error(f"File not found error: {str(e)}")
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text=f"{item['name']}\n\n{item['description']}\n\n‚ö†Ô∏è –û—à–∏–±–∫–∞: —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=reply_markup
            )
        except Exception as e:
            logging.error(f"Error in beast handler: {str(e)}")
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text=f"{item['name']}\n\n{item['description']}\n\n‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {str(e)}",
                reply_markup=reply_markup
            )
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ —Ñ–∞–π–ª—ã
            for media in media_group:
                try:
                    if hasattr(media.media, 'close'):
                        media.media.close()
                except:
                    pass
    
    elif query.data.startswith('loc_'):
        item_key = query.data.replace('loc_', '')
        item = LOCATIONS[item_key]
        keyboard = [[InlineKeyboardButton("üîô –ö –ª–æ–∫–∞—Ü–∏—è–º", callback_data='locations')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º
            if not os.path.exists(item['image_path1']):
                logging.error(f"File not found: {item['image_path1']}")
                raise FileNotFoundError(f"Image file not found: {item['image_path1']}")

            media_group = []
            caption = f"{item['name']}\n\n{item['description']}"
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            try:
                media_group.append(
                    InputMediaPhoto(
                        media=open(item['image_path1'], 'rb'),
                        caption=caption
                    )
                )
            except Exception as e:
                logging.error(f"Error opening first image {item['image_path1']}: {str(e)}")
                raise
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
            if 'image_path2' in item:
                if not os.path.exists(item['image_path2']):
                    logging.error(f"Second image file not found: {item['image_path2']}")
                else:
                    try:
                        media_group.append(
                            InputMediaPhoto(
                                media=open(item['image_path2'], 'rb')
                            )
                        )
                    except Exception as e:
                        logging.error(f"Error opening second image {item['image_path2']}: {str(e)}")
            
            if not media_group:
                raise Exception("No valid images to send")
            
            # Delete previous messages before sending new ones
            await delete_previous_messages(context, query.message.chat_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            sent_media = await context.bot.send_media_group(
                chat_id=query.message.chat_id,
                media=media_group
            )
            
            # Store message IDs for later deletion
            context.user_data['last_media_messages'] = [msg.message_id for msg in sent_media]
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Ç–¥–µ–ª—å–Ω–æ
            keyboard_message = await context.bot.send_message(
                chat_id=query.message.chat_id,
                text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup
            )
            
            # Store keyboard message ID
            context.user_data['last_keyboard_message'] = keyboard_message.message_id
            
        except FileNotFoundError as e:
            logging.error(f"File not found error: {str(e)}")
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text=f"{item['name']}\n\n{item['description']}\n\n‚ö†Ô∏è –û—à–∏–±–∫–∞: —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=reply_markup
            )
        except Exception as e:
            logging.error(f"Error in location handler: {str(e)}")
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text=f"{item['name']}\n\n{item['description']}\n\n‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {str(e)}",
                reply_markup=reply_markup
            )
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ —Ñ–∞–π–ª—ã
            for media in media_group:
                try:
                    if hasattr(media.media, 'close'):
                        media.media.close()
                except:
                    pass
    
    elif query.data.startswith('note_'):
        item_key = query.data.replace('note_', '')
        item = STORY_NOTES[item_key]
        keyboard = [[InlineKeyboardButton("üîô –ö –∑–∞–º–µ—Ç–∫–∞–º", callback_data='notes')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º
            if not os.path.exists(item['image_path1']):
                logging.error(f"File not found: {item['image_path1']}")
                raise FileNotFoundError(f"Image file not found: {item['image_path1']}")

            media_group = []
            caption = f"{item['name']}\n\n{item['description']}"
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            try:
                media_group.append(
                    InputMediaPhoto(
                        media=open(item['image_path1'], 'rb'),
                        caption=caption
                    )
                )
            except Exception as e:
                logging.error(f"Error opening first image {item['image_path1']}: {str(e)}")
                raise
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
            if 'image_path2' in item:
                if not os.path.exists(item['image_path2']):
                    logging.error(f"Second image file not found: {item['image_path2']}")
                else:
                    try:
                        media_group.append(
                            InputMediaPhoto(
                                media=open(item['image_path2'], 'rb')
                            )
                        )
                    except Exception as e:
                        logging.error(f"Error opening second image {item['image_path2']}: {str(e)}")
            
            if not media_group:
                raise Exception("No valid images to send")
            
            # Delete previous messages before sending new ones
            await delete_previous_messages(context, query.message.chat_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            sent_media = await context.bot.send_media_group(
                chat_id=query.message.chat_id,
                media=media_group
            )
            
            # Store message IDs for later deletion
            context.user_data['last_media_messages'] = [msg.message_id for msg in sent_media]
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Ç–¥–µ–ª—å–Ω–æ
            keyboard_message = await context.bot.send_message(
                chat_id=query.message.chat_id,
                text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup
            )
            
            # Store keyboard message ID
            context.user_data['last_keyboard_message'] = keyboard_message.message_id
            
        except FileNotFoundError as e:
            logging.error(f"File not found error: {str(e)}")
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text=f"{item['name']}\n\n{item['description']}\n\n‚ö†Ô∏è –û—à–∏–±–∫–∞: —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=reply_markup
            )
        except Exception as e:
            logging.error(f"Error in note handler: {str(e)}")
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text=f"{item['name']}\n\n{item['description']}\n\n‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {str(e)}",
                reply_markup=reply_markup
            )
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ —Ñ–∞–π–ª—ã
            for media in media_group:
                try:
                    if hasattr(media.media, 'close'):
                        media.media.close()
                except:
                    pass

def main():
    """Start the bot."""
    # Create the Application
    application = Application.builder().token(TOKEN).build()

    # Add handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))

    # Run the bot until the user presses Ctrl-C
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main() 